"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIDToken = exports.getTokenEndPoint = void 0;
const core = __importStar(require("@actions/core"));
const http_client_1 = require("@actions/http-client");
const auth_1 = require("@actions/http-client/auth");
function getTokenEndPoint() {
    return __awaiter(this, void 0, void 0, function* () {
        const httpclient = createHttpClient();
        if (httpclient == undefined) {
            throw new Error(`Failed to get Httpclient `);
        }
        core.debug(`Httpclient created ${httpclient} `); // debug is only output if you set the secret `ACTIONS_RUNNER_DEBUG` to true
        const url = 'https://ghactionsoidc.azurewebsites.net/.well-known/openid-configuration';
        core.debug(`Url is ${url}`);
        const response = yield httpclient.get(url);
        if (response.message.statusCode != 200) {
            throw new Error(`Failed to get Token end point. Error message :${response.message.statusMessage} `);
        }
        const body = yield response.readBody();
        const val = JSON.parse(body);
        const token_endpoint_url = val['token_endpoint'];
        core.debug(`token endpoint url in function is  ${token_endpoint_url}`);
        return token_endpoint_url;
    });
}
exports.getTokenEndPoint = getTokenEndPoint;
function createHttpClient() {
    const token = process.env['GITHUB_TOKEN'] || '';
    const bearerCredentialHandler = new auth_1.BearerCredentialHandler(token);
    return new http_client_1.HttpClient('actions/oidc-client', [bearerCredentialHandler]);
}
function getUploadHeaders() {
    const requestOptions = {};
    requestOptions['Accept'] = `application/json`;
    requestOptions['Content-Type'] = 'application/x-www-form-urlencoded';
    requestOptions['Grant_Type'] = 'password';
    return requestOptions;
}
function getIDToken(clientid, clientsecret) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const url_token_endpoint = yield getTokenEndPoint();
            if (url_token_endpoint == undefined) {
                throw new Error(`Token endpoint not found`);
            }
            core.debug(`token endpoint url is ${url_token_endpoint}`);
            const token = process.env['GITHUB_TOKEN'];
            const repo_path = process.env['GITHUB_REPOSITORY'];
            const workspace = process.env['GITHUB_WORKSPACE'];
            const ref = process.env['GITHUB_REF'];
            if (repo_path === undefined ||
                token === undefined ||
                workspace === undefined ||
                ref === undefined) {
                throw new Error(`One of the values is undefined. Token : ${token}, Repo : ${repo_path}, Workspace : ${workspace}, Ref : ${ref}`);
            }
            const [owner, repo] = repo_path.split('/');
            const branch = ref.match(/(?<=refs\/heads\/).+/g)[0];
            if (owner == undefined || repo == undefined || branch == undefined) {
                throw new Error(`One of the values is undefined. Owner : ${owner}, Repo : ${repo}, Branch : ${branch}`);
            }
            core.debug(`owner is ${owner}`);
            core.debug(`repo is ${repo}`);
            core.debug(`branch is ${branch}`);
            const httpclient = createHttpClient();
            if (httpclient == undefined) {
                throw new Error(`Failed to get Httpclient `);
            }
            core.debug(`Httpclient created ${httpclient} `); // debug is only output if you set the secret `ACTIONS_RUNNER_DEBUG` to true
            const parameters = `grant_type=password&client_id=${clientid}&username=demorepo&password=HelloWorld123#&scope=openid&client_secret=${clientsecret}`;
            const headers = getUploadHeaders();
            core.debug(`header is ${headers}`);
            const response = yield httpclient.post(url_token_endpoint, parameters, headers);
            if (response.message.statusCode != 200) {
                throw new Error(`Failed to get ID Token. Error message  :${response.message.statusMessage} `);
            }
            const body = yield response.readBody();
            const val = JSON.parse(body);
            const id_token = val['id_token'];
            if (id_token == undefined) {
                throw new Error(`Not able to fetch the ID token`);
            }
            return id_token;
        }
        catch (error) {
            core.setFailed(error.message);
            return error.message;
        }
    });
}
exports.getIDToken = getIDToken;
module.exports.getIDToken = getIDToken;
//# sourceMappingURL=main.js.map